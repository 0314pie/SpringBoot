package net.kdigital.board.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.kdigital.board.dto.BoardDTO;
import net.kdigital.board.entity.BoardEntity;
import net.kdigital.board.repository.BoardRepository;
import net.kdigital.board.util.FileService;

@Service
@Slf4j
@RequiredArgsConstructor
public class BoardService {
	private final BoardRepository boardRepository;
	
	// 업로드된 파일이 저장될 디렉토리 경로를 읽어옴
	@Value("${spring.servlet.multipart.location}")
	String uploadPath;
	 
	public List<BoardDTO> selectAll() {
		log.info("------- BoardService");
		List<BoardEntity> entityList = boardRepository.findAll(Sort.by(Sort.Direction.DESC, "createDate"));
		
		List<BoardDTO> dtoList = new ArrayList<>();   //  변환된 entity를 담을 리스트 만들기
		
		//entity를 dto로 변환하여 List에 담는 작업
		entityList.forEach((entity) -> dtoList.add(BoardDTO.toDTO(entity)));  
		
		return dtoList;
	}
	
	/**
	 * DB에 게시글 저장
	 * @param boardDTO
	 */
	public void insertBoard(BoardDTO boardDTO) {
		boardDTO.setBoardWriter("귀요미");
		
		log.info("저장경로: {}", uploadPath);
		
		String originalFileName = null;
		String savedFileName = null;
		
		// 첨부파일이 있으면 파일명 세팅 실시
		if(!boardDTO.getUploadFile().isEmpty()) {
			savedFileName = FileService.saveFile(boardDTO.getUploadFile(), uploadPath);
			originalFileName = boardDTO.getUploadFile().getOriginalFilename();
			
			boardDTO.setOriginalFileName(originalFileName);
			boardDTO.setSavedFileName(savedFileName);
			
		}

		BoardEntity boardEntity = BoardEntity.toEntity(boardDTO);
		
		// DB에 저장
		boardRepository.save(boardEntity);
	}
	
	// DB에서 boardNum에 해당하는 글을 조회
	public BoardDTO selectOne(Long boardNum) {
		Optional<BoardEntity> entity = boardRepository.findById(boardNum);
		
		if(entity.isPresent()) {
			BoardEntity boardEntity = entity.get();
			BoardDTO dto = BoardDTO.toDTO(boardEntity);
			return dto;
		}
		
		return null;
	}
	
	/**
	 * DB에서 boardNum에 해당하는 글을 삭제
	 * @param boardNum
	 */
	@Transactional
	public void deleteOne(Long boardNum) {
		// 글번호에 해당하는 글을 읽어옴 --> savedfilename을 알아야 하므로!
		
		Optional<BoardEntity> entity = boardRepository.findById(boardNum);
		
		if(entity.isPresent()) {
			BoardEntity board = entity.get();
			
			String savedFileName = board.getSavedFileName();
			log.info("{}", savedFileName);
			
			if(savedFileName != null) {
				String fullPath = uploadPath + "/" + savedFileName;
				FileService.deleteFile(fullPath);
			}
			boardRepository.deleteById(boardNum);
	
		}
	}
	
	/**
	 * DB에 데이터 수정 작업 처리
	 * @param boardDTO
	 */
	@Transactional
	public void updateOne(BoardDTO boardDTO) {
		
		// 1) 파일 첨부되어있음
		// 		- 기존 DB에 저장된 파일을 읽어옴
		// 		- 이미 저장된 파일이 있다면 그 파일을 삭제
		// 		- 새로운 파일로 대체
		//		- 저장
		// 2) 파일 첨부를 안함
		//		- 글만 수정
		//		- 문제) 기존파일은 날아가면 안됨
		
		Optional<BoardEntity> entity = boardRepository.findById(boardDTO.getBoardNum());
		
		String oldSavedFileName = null;
		
		MultipartFile uploadFile = boardDTO.getUploadFile();  
		
		// 준비작업 (파일이 첨부 되었는지 여부 확인)
		if(!uploadFile.isEmpty()) {
			String originalFileName = uploadFile.getOriginalFilename();
			String savedFileName = FileService.saveFile(uploadFile, uploadPath);
			
			boardDTO.setOriginalFileName(originalFileName);
			boardDTO.setSavedFileName(savedFileName);
		}
		
		// DB로 부터 가져온 데이터 확인
		if(entity.isPresent()) {
			BoardEntity boardEntity = entity.get();
			
			// 기존에 파일이 있으면 기존 파일은 삭제
			oldSavedFileName = boardEntity.getSavedFileName();
			
			if(oldSavedFileName != null) {
				// 파일을 삭제
				String fullPath = uploadPath + "/" + oldSavedFileName;
				FileService.deleteFile(fullPath);
			}
			
			boardEntity.setBoardTitle(boardDTO.getBoardTitle());
			boardEntity.setBoardContent(boardDTO.getBoardContent());
			boardEntity.setUpdateDate(boardDTO.getUpdateDate());
			boardEntity.setOriginalFileName(boardDTO.getOriginalFileName());
			boardEntity.setSavedFileName(boardDTO.getSavedFileName());
		}
	}
	
}
